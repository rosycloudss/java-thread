线程安全：
    就是获得的实例变量的值是经过同步处理的，不会出现脏读的现象。
非线程安全：
    在多个线程对同一对象中的实例变量进行并发访问时发生，产生的后果就是“脏读”，也就是取到的数据其实是被更改过的。
    非线程安全为题存在于 实例变量中，如果方法内部都是私有变量，则不存在 非线程安全 的问题
    方法中的变量不存在 非线程安全， 永远是线程安全的。
    如果多个线程共同访问1个对象中的实例变量，则可能出现 非线程安全 问题


synchronized（同步） 关键字：
    synchronized 取得的锁都是对象锁，而不是把一段代码或方法当做锁。
    调用 synchronized 生命的方法一定是排队运行的
    只有共享资源的读写访问才需要同步化，如果不是共享资源，就没有同步的必要了，

 脏读：
 synchronized 锁重入：
    synchronized 拥有锁重入的功能，也就是在使用 synchronized 时，当一个线程得到一个对象锁或，再次请求此对象锁时是可以再次得到该对象的锁的，即 在一个synchronized方法/块
    的内部调用本类的其他synchronized方法/块时，是永远可以得到锁。
 “可重入锁":
    自己可以再次获取自己的内部锁，比如一个线程获取了某个对象的锁，此时这个对象锁还没有释放，当其想要再次获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁，
    可重入锁支持在父子类继承的环境中 在父子继承关系中，子类对象可通过可重入锁调用父类的同步方法
 出现异常时，锁自动释放

 synchroinzed 同步语句块：
    当一个线程访问Object的一个 synchroinzed(this)同步代码块时，其他线程对同一个object中的所有其他synchroinzed(this)同步代码块的访问将被阻塞，这说明synchroinzed 使用的
    对象监视器 是一个， 即为当前对象


将任意对象作为对象监视器
    多个线程调用同一个对象中的不同名称synchronized同步方法或synchronized(this)同步代码块时，调用的效果是同步的，阻塞的

    java 支撑 “对任意对象”作为“对象监视器”来实现同步的功能。 synchronized(非this对象)

    锁非this对象的优点：
        如果一个类中有很多synchronized方法，这是虽然能实现同步，但会受到阻塞，所以影响运行效率；但如果使用同步代码块锁非this对象，则synchronized(非this)代码块中的程序与同步
        方法时异步的，不与其他锁this同步方法争抢this锁，则和大大提高运行效率

synchronized(非this对象x) ：
    1. 当多个线程同时执行synchronnized(x){}同步代码块时呈同步效果。
    2. 当其他线程执行x对象中的synchronized同步方法时呈同步效果，
    3. 当其他线程执行x对象方法里面的synchronized(this)代码块时也呈同步效果。


静态同步synchronized方法和synchronized(class)代码块
    如果synchronize应用在static静态方法上，则对当前.java文件对应的class类进行持锁
    对象锁和class锁不相同：
        一个线程持有一个类的对象锁还可以持有这个类的class锁
    synchronized(class) 和 synchronized static 方法的作用一样

锁对象的改变：如果在synchronized(锁)代码块中改变了锁对象的属性，则对其他争取相同锁的线程无影响
            如果在synchronized(锁)代码块中改变了锁对象，则可能造成不同步


volatile关键字
    主要作用是使变量在多个线程间可见

synchronized 和 volatile 比较：
    1. 关键字volatile是线程同步的轻量级实现，所以volatile性能肯定比synchronized要好，并且volatile只能修饰变量，而synchronized可以修饰方法和代码块，
    2. 多线程访问volatile不会发生阻塞，而synchronized会出现阻塞
    3. volatile能保证数据的可见性，但不能保证原子性；而synchronized可以保证原子性，也可以间接保证可见性，因为它会将私有内存和公共内存中的数据同步。
    4. volatile解决的是变量在多个线程之间的可见性；synchronized解决的是多个线程之间访问资源的同步性。
关键字volatile主要使用的场合是在多个线程中可以感知实例变量被更改了，并且可以获得最新的值使用，也就是用多个线程读取共享变量时可以获得最新值使用。
关键字volatile提示线程每次从共享内存中读取变量，而不是从私有内存中读取，这样就保证了同步数据的可见性。


AtomicInteger
原子操作是不能分割的整体，没有其他线程能够中断或检查原子操作中的变量。一个原子（atomic）类型就是一个原子操作可用的类型

关键字synchronized可以使多个线程访问同一个资源具有同步性，而且它还具有将线程工作内存中的私有变量与公共内存中的变量同步的功能

